{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red157\green0\blue210;\red245\green245\blue245;\red0\green0\blue0;
\red144\green1\blue18;\red101\green76\blue29;\red19\green85\blue52;\red15\green112\blue1;\red0\green0\blue255;
\red0\green0\blue109;}
{\*\expandedcolortbl;;\cssrgb\c68627\c0\c85882;\cssrgb\c96863\c96863\c96863;\cssrgb\c0\c0\c0;
\cssrgb\c63922\c8235\c8235;\cssrgb\c47451\c36863\c14902;\cssrgb\c6667\c40000\c26667;\cssrgb\c0\c50196\c0;\cssrgb\c0\c0\c100000;
\cssrgb\c0\c6275\c50196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh14780\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 from\cf0 \strokec4  google.colab \cf2 \strokec2 import\cf0 \strokec4  files\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 uploaded = files.upload()\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 from\cf0 \strokec4  google.colab \cf2 \strokec2 import\cf0 \strokec4  drive\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 drive.mount(\cf5 \cb3 \strokec5 '/content/drive'\cf0 \cb3 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 with\cf0 \strokec4  \cf6 \cb3 \strokec6 open\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 'IR_00009.IS2'\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 'rb'\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  f:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     header = f.read(\cf7 \cb3 \strokec7 100\cf0 \cb3 \strokec4 )  \cf8 \cb3 \strokec8 # Read first 100 bytes\cf0 \cb1 \strokec4 \
\cb3     \cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (header)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf0 \strokec4  zipfile\cb1 \
\
\cf2 \cb3 \strokec2 with\cf0 \strokec4  zipfile.ZipFile(\cf5 \cb3 \strokec5 'IR_00009.IS2'\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 'r'\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  zip_ref:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     zip_ref.extractall(\cf5 \cb3 \strokec5 'output_folder'\cf0 \cb3 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf0 \strokec4  os\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  shutil\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 source_folder = \cf5 \cb3 \strokec5 "output_folder"\cf0 \cb1 \strokec4 \
\cb3 target_file = \cf5 \cb3 \strokec5 "CalibrationData.gpbenc"\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 for\cf0 \strokec4  root, dirs, files \cf9 \cb3 \strokec9 in\cf0 \cb3 \strokec4  os.walk(source_folder):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf2 \strokec2 if\cf0 \strokec4  target_file \cf9 \cb3 \strokec9 in\cf0 \cb3 \strokec4  files:\cb1 \
\cb3         shutil.move(os.path.join(root, target_file), \cf5 \cb3 \strokec5 "."\cf0 \cb3 \strokec4 )\cb1 \
\cb3         \cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (\cf9 \cb3 \strokec9 f\cf5 \cb3 \strokec5 "Extracted \cf0 \cb3 \strokec4 \{target_file\}\cf5 \cb3 \strokec5  successfully!"\cf0 \cb3 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf0 \strokec4  os\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  shutil\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 source_folder = \cf5 \cb3 \strokec5 "output_folder"\cf0 \cb1 \strokec4 \
\cb3 target_file = \cf5 \cb3 \strokec5 "CalTempDataRex.gpbenc"\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 for\cf0 \strokec4  root, dirs, files \cf9 \cb3 \strokec9 in\cf0 \cb3 \strokec4  os.walk(source_folder):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf2 \strokec2 if\cf0 \strokec4  target_file \cf9 \cb3 \strokec9 in\cf0 \cb3 \strokec4  files:\cb1 \
\cb3         shutil.move(os.path.join(root, target_file), \cf5 \cb3 \strokec5 "."\cf0 \cb3 \strokec4 )\cb1 \
\cb3         \cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (\cf9 \cb3 \strokec9 f\cf5 \cb3 \strokec5 "Extracted \cf0 \cb3 \strokec4 \{target_file\}\cf5 \cb3 \strokec5  successfully!"\cf0 \cb3 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 with\cf0 \strokec4  \cf6 \cb3 \strokec6 open\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 "CalibrationData.gpbenc"\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 "rb"\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  f:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     data = f.read(\cf7 \cb3 \strokec7 100\cf0 \cb3 \strokec4 )  \cf8 \cb3 \strokec8 # Read the first 100 bytes\cf0 \cb1 \strokec4 \
\cb3     \cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (data)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 with\cf0 \strokec4  \cf6 \cb3 \strokec6 open\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 "CalTempDataRex.gpbenc"\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 "rb"\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  f:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     data = f.read(\cf7 \cb3 \strokec7 100\cf0 \cb3 \strokec4 )  \cf8 \cb3 \strokec8 # Read the first 100 bytes\cf0 \cb1 \strokec4 \
\cb3     \cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (data)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 apt-get update && apt-get install -y protobuf-compiler\cb1 \
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 protoc --decode_raw < CalibrationData.gpbenc\cb1 \
\
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 protoc --decode_raw < CalibrationData.gpbenc\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 with\cf0 \strokec4  \cf6 \cb3 \strokec6 open\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 "CalibrationData.gpbenc"\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 "rb"\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  f:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     raw_data = f.read()\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (raw_data)  \cf8 \cb3 \strokec8 # See if it's binary or readable\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf0 \strokec4  struct\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 # Open the .is2 file in binary mode\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 with\cf0 \strokec4  \cf6 \cb3 \strokec6 open\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 'IR_00009.IS2'\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 'rb'\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  \cf10 \cb3 \strokec10 file\cf0 \cb3 \strokec4 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf8 \cb3 \strokec8 # Example: Read a specific section (e.g., camera data is stored at a certain offset)\cf0 \cb1 \strokec4 \
\cb3     \cf10 \cb3 \strokec10 file\cf0 \cb3 \strokec4 .seek(OFFSET)  \cf8 \cb3 \strokec8 # Offset where camera info starts (change according to your file's format)\cf0 \cb1 \strokec4 \
\
\cb3     \cf8 \cb3 \strokec8 # Extract camera data using struct (example for float data)\cf0 \cb1 \strokec4 \
\cb3     camera_data = struct.unpack(\cf5 \cb3 \strokec5 'f'\cf0 \cb3 \strokec4  * \cf7 \cb3 \strokec7 3\cf0 \cb3 \strokec4 , \cf10 \cb3 \strokec10 file\cf0 \cb3 \strokec4 .read(\cf7 \cb3 \strokec7 12\cf0 \cb3 \strokec4 ))  \cf8 \cb3 \strokec8 # Example: 3 floats for camera parameters (change this)\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (camera_data)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf0 \strokec4  zipfile\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 # Open the .is2 file as a zip file\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 with\cf0 \strokec4  zipfile.ZipFile(\cf5 \cb3 \strokec5 'IR_00009.IS2'\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 'r'\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  zip_ref:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     zip_ref.printdir()  \cf8 \cb3 \strokec8 # This will list all files inside the archive\cf0 \cb1 \strokec4 \
\cb3     zip_ref.extract(\cf5 \cb3 \strokec5 'CalTempDataRex.gpbenc'\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 'output_directory'\cf0 \cb3 \strokec4 )  \cf8 \cb3 \strokec8 # Extract the specific .gpbenc file\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 "Extraction complete."\cf0 \cb3 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 with\cf0 \strokec4  \cf6 \cb3 \strokec6 open\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 'IR_00009.IS2'\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 'rb'\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  \cf10 \cb3 \strokec10 file\cf0 \cb3 \strokec4 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     content = \cf10 \cb3 \strokec10 file\cf0 \cb3 \strokec4 .read()\cb1 \
\
\cb3     \cf8 \cb3 \strokec8 # Assuming the filename 'CalTempDataRex.gpbenc' is somewhere in the binary data\cf0 \cb1 \strokec4 \
\cb3     start_idx = content.find(b\cf5 \cb3 \strokec5 'CalTempDataRex.gpbenc'\cf0 \cb3 \strokec4 )  \cf8 \cb3 \strokec8 # Find the start of the .gpbenc file\cf0 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 if\cf0 \strokec4  start_idx != \cf7 \cb3 \strokec7 -1\cf0 \cb3 \strokec4 :\cb1 \
\cb3         \cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (\cf9 \cb3 \strokec9 f\cf5 \cb3 \strokec5 "Found the .gpbenc file at byte offset \cf0 \cb3 \strokec4 \{start_idx\}\cf5 \cb3 \strokec5 "\cf0 \cb3 \strokec4 )\cb1 \
\
\cb3         \cf8 \cb3 \strokec8 # You can now extract the relevant portion of the file based on its size\cf0 \cb1 \strokec4 \
\cb3         \cf8 \cb3 \strokec8 # Example: Extract 500 bytes starting from the found index\cf0 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 with\cf0 \strokec4  \cf6 \cb3 \strokec6 open\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 'CalTempDataRex.gpbenc'\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 'wb'\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  output_file:\cb1 \
\cb3             output_file.write(content[start_idx:start_idx + \cf7 \cb3 \strokec7 500\cf0 \cb3 \strokec4 ])  \cf8 \cb3 \strokec8 # Adjust the size accordingly\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 "Extraction complete."\cf0 \cb3 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 apt-get install -y libimage-exiftool-perl\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf0 \strokec4  subprocess\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 file_path = \cf5 \cb3 \strokec5 "/content/IR_00009.IS2"\cf0 \cb1 \strokec4 \
\
\cb3 metadata = subprocess.run([\cf5 \cb3 \strokec5 "exiftool"\cf0 \cb3 \strokec4 , file_path], capture_output=\cf9 \cb3 \strokec9 True\cf0 \cb3 \strokec4 , text=\cf9 \cb3 \strokec9 True\cf0 \cb3 \strokec4 )\cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (metadata.stdout)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 exiftool -b -GPBENC -o extracted_gpbenc.dat \cf5 \cb3 \strokec5 "/content/IR_00009.IS2"\cf0 \cb1 \strokec4 \
\
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 file extracted_gpbenc.dat\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 with\cf0 \strokec4  \cf6 \cb3 \strokec6 open\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 "extracted_gpbenc.dat"\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 "rb"\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  \cf10 \cb3 \strokec10 file\cf0 \cb3 \strokec4 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     data = \cf10 \cb3 \strokec10 file\cf0 \cb3 \strokec4 .read()\cb1 \
\cb3     \cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (data[:\cf7 \cb3 \strokec7 100\cf0 \cb3 \strokec4 ])\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 ls -lh extracted_gpbenc.dat\cb1 \
\
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 unzip extracted_file.gpbenc -d extracted_gpbenc_files\cb1 \
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 file extracted_gpbenc_files/CalTempDataRex.gpbenc\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 import\cf0 \strokec4  json\cb1 \
\
\cf2 \cb3 \strokec2 with\cf0 \strokec4  \cf6 \cb3 \strokec6 open\cf0 \cb3 \strokec4 (\cf5 \cb3 \strokec5 "extracted_gpbenc_files/metadata.json"\cf0 \cb3 \strokec4 , \cf5 \cb3 \strokec5 "r"\cf0 \cb3 \strokec4 ) \cf2 \strokec2 as\cf0 \strokec4  \cf10 \cb3 \strokec10 file\cf0 \cb3 \strokec4 :\cb1 \
\cb3     metadata = json.load(\cf10 \cb3 \strokec10 file\cf0 \cb3 \strokec4 )\cb1 \
\
\cf6 \cb3 \strokec6 print\cf0 \cb3 \strokec4 (json.dumps(metadata, indent=\cf7 \cb3 \strokec7 4\cf0 \cb3 \strokec4 ))\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 file extracted_gpbenc_files/CalibrationData.gpbenc\cb1 \
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 file extracted_gpbenc_files/CalTempDataRex.gpbenc\cb1 \
\cf9 \cb3 \strokec9 !\cf0 \cb3 \strokec4 file extracted_gpbenc_files/CameraInfo.gpbenc\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf0 \strokec4  numpy \cf2 \strokec2 as\cf0 \strokec4  np\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 # Load the binary thermal data (try uint16 for 16-bit depth)\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 thermal_data = np.fromfile(\cf5 \cb3 \strokec5 "extracted_gpbenc_files/CalTempDataRex.gpbenc"\cf0 \cb3 \strokec4 , dtype=np.uint16)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 # Get the correct dimensions from the metadata if available.\cf0 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 # Assuming metadata is a dictionary and contains 'width' and 'height'\cf0 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 # Replace with actual keys from your metadata if different\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 width = metadata.get(\cf5 \cb3 \strokec5 'width'\cf0 \cb3 \strokec4 , \cf7 \cb3 \strokec7 198\cf0 \cb3 \strokec4 )  \cf8 \cb3 \strokec8 # Fallback to 160 if not found\cf0 \cb1 \strokec4 \
\cb3 height = metadata.get(\cf5 \cb3 \strokec5 'height'\cf0 \cb3 \strokec4 , \cf7 \cb3 \strokec7 155\cf0 \cb3 \strokec4 ) \cf8 \cb3 \strokec8 # Fallback to 120 if not found\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 # Calculate the expected number of elements\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 expected_elements = width * height\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 # Check if the data size matches the expected size\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 if\cf0 \strokec4  thermal_data.size != expected_elements:\cb1 \
\cb3   \cf8 \cb3 \strokec8 # Pad or truncate the data if necessary\cf0 \cb1 \strokec4 \
\cb3   \cf8 \cb3 \strokec8 # Pad with zeros to reach the expected size\cf0 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf0 \strokec4  thermal_data.size < expected_elements:\cb1 \
\cb3     padding_size = expected_elements - thermal_data.size\cb1 \
\cb3     thermal_data = np.pad(thermal_data, (\cf7 \cb3 \strokec7 0\cf0 \cb3 \strokec4 , padding_size), \cf5 \cb3 \strokec5 'constant'\cf0 \cb3 \strokec4 )\cb1 \
\cb3   \cf8 \cb3 \strokec8 # Truncate to the expected size\cf0 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 else\cf0 \strokec4 :\cb1 \
\cb3     thermal_data = thermal_data[:expected_elements]\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 # Reshape based on expected resolution (Check metadata.json for width & height)\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 thermal_data = thermal_data.reshape((height, width))  \cf8 \cb3 \strokec8 # Adjust dimensions if needed\cf0 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 import\cf0 \strokec4  matplotlib.pyplot \cf2 \strokec2 as\cf0 \strokec4  plt\cb1 \
\cb3 plt.imshow(thermal_data, cmap=\cf5 \cb3 \strokec5 "hot"\cf0 \cb3 \strokec4 )\cb1 \
\cb3 plt.colorbar(label=\cf5 \cb3 \strokec5 "Temperature"\cf0 \cb3 \strokec4 )\cb1 \
\cb3 plt.show()\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 min_temp = \cf7 \cb3 \strokec7 0.0\cf0 \cb3 \strokec4   \cf8 \cb3 \strokec8 # Replace with extracted MinTemperature\cf0 \cb1 \strokec4 \
\cb3 max_temp = \cf7 \cb3 \strokec7 100.0\cf0 \cb3 \strokec4   \cf8 \cb3 \strokec8 # Replace with extracted MaxTemperature\cf0 \cb1 \strokec4 \
\
\cb3 temperature_array = min_temp + (thermal_data / \cf7 \cb3 \strokec7 65535.0\cf0 \cb3 \strokec4 ) * (max_temp - min_temp)\cb1 \
\
\cb3 plt.imshow(temperature_array, cmap=\cf5 \cb3 \strokec5 "hot"\cf0 \cb3 \strokec4 )\cb1 \
\cb3 plt.colorbar(label=\cf5 \cb3 \strokec5 "Temperature (\'b0C)"\cf0 \cb3 \strokec4 )\cb1 \
\cb3 plt.show()\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \
}